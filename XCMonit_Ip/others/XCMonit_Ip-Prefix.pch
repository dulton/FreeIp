//
//  Prefix header
//
//  The contents of this file are implicitly included at the beginning of every source file.
//

#import <Availability.h>

#ifndef __IPHONE_3_0
#warning "This project uses features only available in iOS SDK 3.0 and later."
#endif
#import "DevInfoMacro.h"


#ifdef __OBJC__
    #import <UIKit/UIKit.h>
    #import <Foundation/Foundation.h>
    #import "GlobalDefine.h"
    #define XCLocalized(x) NSLocalizedString(x, "")

#define    kUSER_INFO_MAX_LENGTH   64



#endif


/*
 P2P直接打洞成功:芬兰、俄罗斯民房、摩尔多瓦、
 
 lipo -create /Users/xiazhonglin/Desktop/iosp2p/avmv7/libenet.a
 /Users/xiazhonglin/Desktop/iosp2p/armv7s/libenet.a -output
 /Users/xiazhonglin/Desktop/iosp2p/new/libenet.a
 
lipo -create armv7/libavcodec.a arm64/libavcodec.a -output universal/libavcodec.a
lipo -create armv7/libavformat.a arm64/libavformat.a -output universal/libavformat.a
lipo -create armv7/libavutil.a arm64/libavutil.a -output universal/libavutil.a
lipo -create armv7/libswscale.a arm64/libswscale.a -output universal/libswscale.a
 
lipo -create armv7/lib/libavcodec.a arm64/lib/libavcodec.a -output universal/libavcodec.a
lipo -create armv7/lib/libavformat.a arm64/lib/libavformat.a -output universal/libavformat.a
lipo -create armv7/lib/libavutil.a arm64/lib/libavutil.a -output universal/libavutil.a
lipo -create armv7/lib/libswscale.a arm64/lib/libswscale.a -output universal/libswscale.a
 
lipo -create armv7/libenet.a arm64/libenet.a -output universal/libenet.a

lipo -create armv7/libnattrav.a arm64/libnattrav.a -output universal/libnattrav.a

lipo -create armv7/librutil.a  arm64/librutil.a -output universal/librutil.a

lipo -create armv7/libsdkclient.a arm64/libsdkclient.a -output universal/libsdkclient.a
 
 libnattrav.a  librutil.a libsdkclient.a
 

RTSP设备列表:
                1.列表信息可伸缩
                2.添加新的RTSP设备
                3.RTSP协议检测－判断设备状态,30秒轮巡检测-调用ffmpeg接口
                4.列表内容:左边图片-RTSP,上-右边:设备名;下－左:设备状态
RTSP信息数据库:    
 1.用户名  
 2.密码  
 3.地址   
 4.设备类型
 5.通道
 6.端口
 7.设备名
 8.唯一ID
 
RTSP视频播放:      
 1.请求实时流
 2.DVR/NVR通道切换
 3.停止、抓拍、录像、重连
 4.全屏效果
 
RTSP设备添加页面:
 1.设备名
 2.地址
 3.端口
 4.类型
 5.通道
 6.用户名
 7.密码

 
 1.登录页面修改
 2.新添加一个注册页面

 
 
 
1.看IPC和DVR、NVR实时流时，如果抓拍图片成功，则提示“抓拍成功”提示，抓拍时按钮设计成红色  --美工修改   --已经修改
2.看DVR、NVR实时流时，点击录像按钮时，录像按钮图标要设计成红色，而且要提示"开始录像",IPC录像时
有提示“开始录像”，录像完成后图标要恢复正常，且提示“录像停止”。而且如果对应通道如果没有视频时，
则抓拍和录像按钮应该设置成灰色，使其不能抓拍和录像           --图片修改   --已经修改
 
3.本地录像显示默认显示当天录像，且支持按时间(具体到天)来查询录像,无录像文件时页面显示无录像文件的相关提示  --功能更改
 
4.“更多” 里面添加"查看版本"信息 -- 有

5.增加”序列号扫描“功能 --需要加入篮框
 
6.FREEIP图标logo改成云状环绕的logo --改了
 
//录像
 
//录像-整体功能优化
1.时间段搜索
2.界面休整
3.删除方式
4.显示时间间隔
 

//RTSP界面修改
1.删除方式
2.录像查看
3.通道点播方式

 
//播放界面
1.图标
2.
 
//我的视频
 
//管理
 
//报警

 
 
logo修改

二维码扫描
 

 
www.freeip.com
1456738216
 
添加rtsp页面  --已完善
个人信息页面
帮助页面
设备详情
 
     IOS客服端开发未完善部分处理
1.新录像播放
2.IOS8兼容
3.图片3x
    IDP个人账号审核状态
  由于连续一个星期没有出现错误结论,
  估计应该月底可以下载
    IDP企业版申请状态
    apple公司反馈回来结果，在企业版账号注册后，
没有验证邮箱，选择公司类型为私企。
    之后重新申请，后面还需要一系列4个步骤。
 
 
       10月24日
    1.两个边缘按钮修改       --ok
    2.二维码扫描图片识别     --ok
    3.保存图片问题          --ok
    4.重力感应
    5.列表排序             --ok
    6.录像记录休整
    7.视频播放横屏修改      --ok
    8.我的与设备管理界面细节修改    --OK
 
    11月3日
    1.发布版本
    2.RTSP修改
    3.
 
 
    1月5日后工作内容
    1.葡萄牙语加入，图片部分修改，与google翻译对应检测，是否有字母编写错误
    2.云台操作实现
    3.视频优化
    4.DVR与NVR视频播放
    5.直连的方式修改
    6.图片查看整个模块修改
    7.app store新版发布
 
    1月7日
    1.防止抓拍与录像的重复动作  
    2.直连漏洞修改
    3.修改FFMPEG版本中，对rtsp协议支持的部分
    1月8日
    1.直连实时播放与历史播放界面修改
    2.直连实时播放流程修改
    1月9日
    1.图像浏览整体修改，替换开源资源
    2.修改视频切换部分
 
    svn import /Users/xiazhonglin/Documents/XCMonit_IpV5.1.3 https://172.18.191.42:8443/svn/xzlProject/trunk/ios/XCMonit_IpV5.1.3 -m "初始化导入"
 
 
    zfe845251361     caoxi628688
 
    3月2日
    工作内容：1.修改http login
    2.direct修改
    3.视频放大缩小功能修改
 
    新增功能
    1.电子放大
    详解：最大将视频放大4.0
    加入scrollview
    
    为什么要用设计模式?
    开发要怎么进步?
    1.阅读
    2.编写另外的代码
    3.查看开源代码

 
    将解码库整理成一个第三方库的样本，方便统一查看
 
 
    1.重新设计PlayP2PViewController
    2.重新设计解码库
    3.策略模式与工厂模式区分
    1.解码库
    A.根据单一
    B.里氏替换
    C.依赖倒置
    D.开闭
    E.接口隔离
 
        解码库的属性-
        解码库的业务-
       
        视频的帧、宽度、高度
        码流来源、解码、视频编码
 
    解码动作:初始化,解码
    码流方式:P2P,RTSP,私有协议
            共同点：获取一帧码流
    java code by Source:
    Interface ISource    utils
    {
         public boolean connection(NSString *strNO);   连接设备
         public NSDate getNextFrame();   获取一帧数据
         public void sendMessage();     发送通知
    }
 
    public P2PSource implements ISource
    {
        public boolean connection(NSString *strNO)
        {
            //P2P与转发同时建立
        }
    }
 
    public class RTSPSource implements ISource
    {
        public boolean connection(NSString *rtspPath)
        {
            //建立rtsp连接，需要ffmpeg中的AVFormatContext
            //av_open_path
        }
    }
    
    public class PrivateSource implements ISource
    {
        public boolean connection(NSString *strRTSP)
        {
 
        }
    }
 
    publci class RecordSource implements ISource
    {
        public boolean connection(NSString *strFile)
        {
        }
 
    }
 
    java code by decoder:
    public Interface IDecoder   utils
    {
        public void init();
        public NSArray decodeFrame();
    }
 
    public class XLDecoder implements IDecoder
    {
        public NSArray decodeFrame();
        public void init();
    }
 
    java code by video:
    public Interface IVideo
    {
        public CGFloat fWidth; 
        publci CGFloat fHeight;
        public CGFloat fps;
    }
 
    public class XLVideo
    {
        public CGFloat fWidth; 
        publci CGFloat fHeight;
        public CGFloat fps;
    }
 
    java code by service:
    
    public Interface IDecoderService   services
    {
        -(BOOL)connection(ISource*)source;
        -(BOOL)decoder_init(IDecoder*)decode;
        -(NSArray*)decodeFrame;
        -(void)destory;
        -(void)capture;
        -(void)recording;
    }
    public class XCDecoderService
    {
         -(BOOL)connection(ISource*)source;
         -(BOOL)decoder_init(IDecoder*)decode;
         -(NSArray*)decodeFrame;
         -(void)destory;
         -(void)capture;
         -(void)recording;
    }
      UI OOA:
        所有类型:P2P单通道、P2P多通道、录像、RTSP单通道、RTSP多通道、私有协议单通道、私有协议多
      共同点:
      1.TOPHUD
      2.DOWNHUD
      3.解码器
      不同点:
      1.TOPHUD的按钮
      2.DOWNHUD按钮
      
      封装方式:
      TOPHUD:后退按钮、名称、高清、标清切换、云台显示按钮
 
      DOWNHUD:大部分一致
 
      解码器播放实现封装，使用基类方法
 
 
 131 138 150 165 189 191
 
 */































